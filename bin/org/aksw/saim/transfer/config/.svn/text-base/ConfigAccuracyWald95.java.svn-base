package org.aksw.saim.transfer.config;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;

/**
 * 
 * An implementation of link spec accuracy measurement, which uses the 
 * 95% confidence interval computed via the Wald method.
 * 
 * @author Jens Lehmann
 *
 */
public class ConfigAccuracyWald95 implements ConfigAccuracy {

	@Override
	public double getAccuracy(Configuration configuration, String posExamplesFile, String negExamplesFile) {
		
		// those should come from the configs in some way
//		String posExamplesFile = "specs/am-dbpedia-person/positive.nt";
//		String negExamplesFile = "specs/am-dbpedia-person/negative.nt";
		
		boolean posExists = false;
                if(posExamplesFile!=null) posExists= new File(posExamplesFile).exists();                
		boolean negExists = false;
                if(negExamplesFile!=null) new File(negExamplesFile).exists();
		
		// read in positive.nt and negative.nt
		int posExamples = 0, negExamples = 0;
		try {
			if(posExists) {
				posExamples = countLines(posExamplesFile);
			}
			if(negExists) {
				negExamples = countLines(negExamplesFile);	
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// 0.5 as fallback value if no examples exist
		return (posExamples + negExamples == 0) ? 0.5 : getConfidenceInterval95WaldAverage(posExamples+negExamples,posExamples);
	}

	/**
	 * Computes the 95% confidence interval average of an experiment with boolean outcomes,
	 * e.g. heads or tails coin throws. It uses the very efficient, but still accurate
	 * Wald method. 
	 * @param success Number of successes, e.g. number of times the coin shows head.
	 * @param total Total number of tries, e.g. total number of times the coin was thrown.
	 * @return The average of the lower border and upper border of the 95% confidence interval.
	 */
	public static double getConfidenceInterval95WaldAverage(int total, int success) {
		if(success > total || total < 1) {
			throw new IllegalArgumentException("95% confidence interval for " + success + " out of " + total + " trials cannot be estimated.");
		}
		double[] interval = getConfidenceInterval95Wald(total, success);
		return (interval[0] + interval[1]) / 2;
	}	
	
	/**
	 * Computes the 95% confidence interval of an experiment with boolean outcomes,
	 * e.g. heads or tails coin throws. It uses the very efficient, but still accurate
	 * Wald method. 
	 * @param success Number of successes, e.g. number of times the coin shows head.
	 * @param total Total number of tries, e.g. total number of times the coin was thrown.
	 * @return A two element double array, where element 0 is the lower border and element
	 * 1 the upper border of the 95% confidence interval.
	 */
	public static double[] getConfidenceInterval95Wald(int total, int success) {
		if(success > total || total < 1) {
			throw new IllegalArgumentException("95% confidence interval for " + success + " out of " + total + " trials cannot be estimated.");
		}
		double[] ret = new double[2];
		double p1 = (success+2)/(double)(total+4);
		double p2 = 1.96 * Math.sqrt(p1*(1-p1)/(total+4));
		ret[0] = Math.max(0, p1 - p2);
		ret[1] = Math.min(1, p1 + p2);
		return ret;
	}	
	
	private int countLines(String file) throws IOException {
		LineNumberReader  lnr = new LineNumberReader(new FileReader(new File(file)));
		lnr.skip(Long.MAX_VALUE);
		return lnr.getLineNumber();	
	}
	
	public static void main(String[] args) {
		ConfigAccuracyWald95 test = new ConfigAccuracyWald95();
		System.out.println(test.getAccuracy(null, "specs/am-dbpedia-person/positive.nt", "specs/am-dbpedia-person/negative.nt"));
	}
}
